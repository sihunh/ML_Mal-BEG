import joblib
import numpy as np
from typing import Tuple, Dict, Any
import os
import logging
from datetime import datetime

from analyzers import PEAnalyzer, StringAnalyzer, RegistryAnalyzer, NetworkAnalyzer
from utils import calculate_all_hashes
from Report_generator import MalwareReport

class MalwareDetector:
    def __init__(self, model_path: str = 'models/malware_detection_model.joblib',
                 vectorizer_path: str = 'models/feature_vectorizer.joblib'):
        """
        악성코드 탐지 모델 초기화
        """
        self.logger = self._setup_logging()
        
        try:
            self.model = joblib.load(model_path)
            self.vectorizer = joblib.load(vectorizer_path)
            self.logger.info("모델과 벡터라이저 로드 완료")
        except Exception as e:
            self.logger.error(f"모델 로드 중 오류 발생: {str(e)}")
            raise
            
    def analyze_file(self, file_path: str) -> Tuple[int, float, str]:
        """
        파일 분석 수행
        
        Returns:
            Tuple[int, float, str]: (예측 결과, 신뢰도, 리포트 경로)
        """
        try:
            self.logger.info(f"파일 분석 시작: {file_path}")
            
            # 파일 존재 확인
            if not os.path.exists(file_path):
                raise FileNotFoundError(f"파일을 찾을 수 없음: {file_path}")
            
            # 기본 특성 추출
            features = self._extract_features(file_path)
            
            # 예측 수행
            prediction, confidence = self._predict(features)
            
            # 상세 분석 수행
            analysis_results = self._detailed_analysis(file_path)
            
            # 리포트 생성
            report = MalwareReport(file_path, analysis_results)
            report_path = report.generate_report()
            
            self.logger.info(f"분석 완료 - 예측: {prediction}, 신뢰도: {confidence:.2f}")
            return prediction, confidence, report_path
            
        except Exception as e:
            self.logger.error(f"분석 중 오류 발생: {str(e)}")
            raise
    
    def _extract_features(self, file_path: str) -> Dict[str, Any]:
        """특성 추출"""
        features = {}
        
        # PE 파일 분석
        pe_analyzer = PEAnalyzer(file_path)
        pe_patterns = pe_analyzer.analyze()
        features.update(self._convert_patterns_to_features(pe_patterns, 'pe_'))
        
        # 문자열 분석
        string_analyzer = StringAnalyzer(file_path)
        string_patterns = string_analyzer.analyze()
        features.update(self._convert_patterns_to_features(string_patterns, 'str_'))
        
        return features
    
    def _predict(self, features: Dict[str, Any]) -> Tuple[int, float]:
        """예측 수행"""
        # 특성 벡터화
        feature_vector = self.vectorizer.transform([features])
        
        # 예측
        prediction = self.model.predict(feature_vector)[0]
        probabilities = self.model.predict_proba(feature_vector)[0]
        
        # 신뢰도 계산
        confidence = float(probabilities[1]) if len(probabilities) > 1 else float(probabilities[0])
        
        return int(prediction), confidence
    
    def _detailed_analysis(self, file_path: str) -> Dict[str, Any]:
        """상세 분석 수행"""
        # 해시값 계산
        hashes = calculate_all_hashes(file_path)
        
        # PE 파일 분석
        pe_analyzer = PEAnalyzer(file_path)
        pe_patterns = pe_analyzer.analyze()
        
        # 문자열 분석
        string_analyzer = StringAnalyzer(file_path)
        string_patterns = string_analyzer.analyze()
        
        # 레지스트리 분석
        registry_analyzer = RegistryAnalyzer()
        registry_changes = registry_analyzer.analyze()
        
        # 네트워크 분석
        network_analyzer = NetworkAnalyzer()
        network_activity = network_analyzer.analyze()
        
        return {
            "timestamp": datetime.now().isoformat(),
            "file_info": {
                "path": file_path,
                "size": os.path.getsize(file_path),
                "hashes": hashes
            },
            "pe_analysis": pe_patterns,
            "string_analysis": string_patterns,
            "registry_analysis": registry_changes,
            "network_analysis": network_activity
        }
    
    def _convert_patterns_to_features(self, patterns: list, prefix: str = '') -> Dict[str, int]:
        """패턴을 특성으로 변환"""
        features = {}
        
        # 패턴 타입별 카운트
        pattern_counts = {}
        for pattern in patterns:
            pattern_type = pattern['type']
            pattern_counts[pattern_type] = pattern_counts.get(pattern_type, 0) + 1
        
        # 특성 이름에 접두사 추가
        for pattern_type, count in pattern_counts.items():
            features[f"{prefix}{pattern_type}"] = count
        
        return features
    
    def _setup_logging(self) -> logging.Logger:
        """로깅 설정"""
        logger = logging.getLogger('MalwareDetector')
        logger.setLevel(logging.INFO)
        
        # 로그 포맷 설정
        formatter = logging.Formatter(
            '%(asctime)s - %(name)s - %(levelname)s - %(message)s'
        )
        
        # 파일 핸들러
        if not os.path.exists('logs'):
            os.makedirs('logs')
        
        file_handler = logging.FileHandler(
            f'logs/malware_detector_{datetime.now().strftime("%Y%m%d")}.log'
        )
        file_handler.setFormatter(formatter)
        logger.addHandler(file_handler)
        
        # 콘솔 핸들러
        console_handler = logging.StreamHandler()
        console_handler.setFormatter(formatter)
        logger.addHandler(console_handler)
        
        return logger

